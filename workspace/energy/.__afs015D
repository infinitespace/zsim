#!/usr/bin/python

import h5py
import pprint
import numpy as np
import parse_cfg as ps
import sys

if __name__ == "__main__":
	CFG_PATH = sys.argv[1]     	# CFG_PATH = '../config/het.cfg'
	ZSIMH5_PATH = sys.argv[2]   # ZSIMH5_PATH = '../run/zsim-ev.h5'
 
  my_list = []
  for i in ZSIMH5_PATH:
      if i.isdigit():
         my_list.append()
          
  M = my_list[0]  # process index m
  N	= my_list[1]  # core type index n
  
  core_type = {0 : 'big', 1 : 'mid1', 2 : 'mid2', 3 : 'little'}    # core type index to core type
  
 	cfg = ps.parse(CFG_PATH)
  f = h5py.File(ZSIMH5_PATH, 'r')
	dset = f["stats"]["root"]
	#print dset.shape
	#print dset.dtype

	""" calculate the throughput of process m running on a core of type n """
	endPhase = dset[-1]['phase']
  frequency = float(cfg['sys']['frequency'])
  phaseLength = int(cfg['sim']['phaseLength'])
	ccycles = endPhase * phaseLength
	TIME = float(ccycles / frequency) * 0.000001
 
 	# Cache hits and misses
	l1_1 = np.sum(dset[-1]['l1i_big']['hGETS']+dset[-1]['l1d_big']['hGETS']+dset[-1]['l1i_big']['hGETX']+dset[-1]['l1d_big']['hGETX']+dset[-1]['l1i_big']['mGETS']+dset[-1]['l1d_big']['mGETS'])
	l1_2 = np.sum(dset[-1]['l1i_mid1']['hGETS'])+np.sum(dset[-1]['l1d_mid1']['hGETS'])+np.sum(dset[-1]['l1i_mid1']['hGETX'])+np.sum(dset[-1]['l1d_mid1']['hGETX'])+np.sum(dset[-1]['l1i_mid1']['mGETS'])+np.sum(dset[-1]['l1d_mid1']['mGETS'])
	l1_3 = np.sum(dset[-1]['l1i_mid2']['hGETS'])+np.sum(dset[-1]['l1d_mid2']['hGETS'])+np.sum(dset[-1]['l1i_mid2']['hGETX'])+np.sum(dset[-1]['l1d_mid2']['hGETX'])+np.sum(dset[-1]['l1i_mid2']['mGETS'])+np.sum(dset[-1]['l1d_mid2']['mGETS'])
	l1_4 = np.sum(dset[-1]['l1i_little']['hGETS'])+np.sum(dset[-1]['l1d_little']['hGETS'])+np.sum(dset[-1]['l1i_little']['hGETX'])+np.sum(dset[-1]['l1d_little']['hGETX'])+np.sum(dset[-1]['l1i_little']['mGETS'])+np.sum(dset[-1]['l1d_little']['mGETS'])
	l2_1 = np.sum(dset[-1]['l2_big']['hGETS'] + dset[-1]['l2_big']['hGETX'] + dset[-1]['l2_big']['mGETS'])
	l2_2 = np.sum(dset[-1]['l2_mid1']['hGETS'] + dset[-1]['l2_mid1']['hGETX'] + dset[-1]['l2_mid1']['mGETS'])

  instructions = np.sum(dset[-1][core_type[N]]['instrs']) 
  if N == 0 or N == 1:     
     CORE_VOLTAGE = (frequency/1000) * .30914 + .552688
     I_leak=1.3136495
     CORE_DYN_ENERGY= 2.22/1000000000*instructions*(CORE_VOLTAGE/1.35)*(CORE_VOLTAGE/1.35)
	   CORE_STA_ENERGY= I_leak*CORE_VOLTAGE*TIME
  else:
     CORE_VOLTAGE = (frequency/1000) * .21967 + .66066 
     I_leak =0.45455
  	 CORE_DYN_ENERGY = .78/1000000000*instructions*(CORE_VOLTAGE/1.16)*(CORE_VOLTAGE/1.16)
	   CORE_STA_ENERGY = I_leak * CORE_VOLTAGE * TIME 
       

 
 